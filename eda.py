import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import StandardScaler
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import itertools
import pyodbc
# K·∫øt n·ªëi v·ªõi SQL Server
conn = pyodbc.connect(
    'DRIVER={ODBC Driver 17 for SQL Server};'
    'SERVER=LAPTOP-0SMFMLRQ;'
    'DATABASE=CourseAI;'
    'UID=test;'
    'PWD=1234'
)

# Truy v·∫•n d·ªØ li·ªáu ng∆∞·ªùi d√πng v√† kh√≥a h·ªçc
query_users = "SELECT DISTINCT UserId FROM dbo.UserCourses"
query_courses = "SELECT DISTINCT CourseId FROM dbo.UserCourses"
query_enrollment = "SELECT UserId, CourseId, EnrollmentStatus FROM dbo.UserCourses"

df_users = pd.read_sql(query_users, conn)
df_courses = pd.read_sql(query_courses, conn)
df_enrollments = pd.read_sql(query_enrollment, conn)
conn.close()

# T·∫°o t·∫•t c·∫£ c√°c k·∫øt h·ª£p gi·ªØa ng∆∞·ªùi d√πng v√† kh√≥a h·ªçc
all_combinations = pd.DataFrame(list(itertools.product(df_users['UserId'], df_courses['CourseId'])), 
                                columns=['UserId', 'CourseId'])

# K·∫øt h·ª£p v·ªõi b·∫£ng UserCourses ƒë·ªÉ x√°c ƒë·ªãnh kh√≥a h·ªçc ƒë√£ ƒëƒÉng k√Ω
df = pd.merge(all_combinations, df_enrollments, on=['UserId', 'CourseId'], how='left')

# ƒê·∫∑t EnrollmentStatus cho kh√≥a h·ªçc ch∆∞a ƒëƒÉng k√Ω l√† 0
df['EnrollmentStatus'] = df['EnrollmentStatus'].fillna(0).apply(lambda x: 1 if x == 2 else 0)

# M√£ h√≥a UserId v√† CourseId
user_encoder = LabelEncoder()
df['UserId'] = user_encoder.fit_transform(df['UserId'])

course_encoder = LabelEncoder()
df['CourseId'] = course_encoder.fit_transform(df['CourseId'])

# ƒê·ªãnh d·∫°ng l·∫°i c·ªôt d·ªØ li·ªáu
X = df[['UserId', 'CourseId']]
y = df['EnrollmentStatus']

# Chu·∫©n h√≥a d·ªØ li·ªáu
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Chia d·ªØ li·ªáu
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

def evaluate_input_data(df):
    print("\nüîé ƒê√°nh gi√° d·ªØ li·ªáu ƒë·∫ßu v√†o:")
    
    # 1. Ki·ªÉm tra d·ªØ li·ªáu thi·∫øu (Missing Values)
    missing_values = df.isnull().sum()
    print("\n1Ô∏è‚É£ D·ªØ li·ªáu thi·∫øu (Missing Values):")
    print(missing_values[missing_values > 0])
    
    # 2. Ki·ªÉm tra ph√¢n ph·ªëi c·ªßa c√°c gi√° tr·ªã UserId v√† CourseId
    print("\n2Ô∏è‚É£ Ph√¢n ph·ªëi UserId v√† CourseId (sau khi m√£ h√≥a):")
    print("S·ªë l∆∞·ª£ng UserId duy nh·∫•t:", df['UserId'].nunique())
    print("S·ªë l∆∞·ª£ng CourseId duy nh·∫•t:", df['CourseId'].nunique())
    
    plt.figure(figsize=(12, 5))
    plt.subplot(1, 2, 1)
    sns.histplot(df['UserId'], bins=30, color='skyblue')
    plt.title("Ph√¢n ph·ªëi UserId")

    plt.subplot(1, 2, 2)
    sns.histplot(df['CourseId'], bins=30, color='lightgreen')
    plt.title("Ph√¢n ph·ªëi CourseId")
    plt.show()

    # 3. Ki·ªÉm tra ph√¢n ph·ªëi d·ªØ li·ªáu sau khi chu·∫©n h√≥a
    print("\n3Ô∏è‚É£ Ph√¢n ph·ªëi d·ªØ li·ªáu sau khi chu·∫©n h√≥a:")
    X_scaled_df = pd.DataFrame(X_scaled, columns=['UserId_Scaled', 'CourseId_Scaled'])
    plt.figure(figsize=(12, 5))
    sns.histplot(X_scaled_df['UserId_Scaled'], color='skyblue', label='UserId_Scaled')
    sns.histplot(X_scaled_df['CourseId_Scaled'], color='lightgreen', label='CourseId_Scaled')
    plt.title("Ph√¢n ph·ªëi UserId v√† CourseId sau khi chu·∫©n h√≥a")
    plt.legend()
    plt.show()
    
    # 4. Ki·ªÉm tra gi√° tr·ªã kh√¥ng h·ª£p l·ªá trong EnrollmentStatus
    print("\n4Ô∏è‚É£ Gi√° tr·ªã kh√¥ng h·ª£p l·ªá trong EnrollmentStatus:")
    invalid_status = df[~df['EnrollmentStatus'].isin([0, 1])]
    if not invalid_status.empty:
        print("T√¨m th·∫•y gi√° tr·ªã kh√¥ng h·ª£p l·ªá:")
        print(invalid_status)
    else:
        print("Kh√¥ng c√≥ gi√° tr·ªã kh√¥ng h·ª£p l·ªá.")
    
    # 5. Ph√¢n t√≠ch t·ª∑ l·ªá l·ªõp trong EnrollmentStatus
    print("\n5Ô∏è‚É£ Ph√¢n t√≠ch t·ª∑ l·ªá l·ªõp (EnrollmentStatus):")
    print(df['EnrollmentStatus'].value_counts(normalize=True))
    sns.countplot(x=df['EnrollmentStatus'], palette='pastel')
    plt.title("Ph√¢n b·ªë c·ªßa EnrollmentStatus")
    plt.show()

# G·ªçi h√†m ƒë√°nh gi√° d·ªØ li·ªáu ƒë·∫ßu v√†o
evaluate_input_data(df)
